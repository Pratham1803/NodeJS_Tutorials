** Project Setup:
-> in github we can not push the empty folders:
    - for that, use '.gitkeep' file in empty folders to push that folder.

-> use .gitignor generator to generate ignored files list for github repositories

-> use public folder, to put the users files temporarily on the server in temp folder, than upload those file to third party storage and collect the url and stor in database to access the file.

-> provide all the source code in src folder, to make project more organized

-> when we change some file than we have stop and start the server to see the changes,
    - use nodemon dev depndencies [Those depndencies that we use at development time not in production ], that automatically restart the server.
    - npm i -D nodemon
    - in package.json, scripts, set the "dev" command with "nodemon src/index.js" command

-> in project setup make folders in src folder:
    - files: app.js, index.js, constants.js
    - 1. contollers -> has major functionalities
    - 2. db -> database connection logic
    - 3. middlewares -> to provide validation code, that track the request of users
        - example: if some request require to login of user, than before process the request, check the login status of user.
        - there are more than one middlewares in the middlewares for validating the request 
    - 4. models -> to set all models
    - 5. routes -> set users url (example: /login, /register)
    - 6. utils -> it is utility for provide code files that will use multiple times in project. like, to upload file in profile or in any other place, send multiple types of mails etc.
    
-> install prettier package, so in team it make formatting same for all developers
    - npm i -D prettier
    - create file, ".prettierrc" to provide configuration of formatting.
    - create file ".prettierignore" to ignore the files.

------------------------------------------------------------------------------------------------

** Connect to Mongo Db:
-> Create project in Mongo Db Atlas.
-> in .env file, set port and connection string
-> IMP : Must Wrap all program in Try and catch
-> IMP : Must use async await.
-> Example: const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URL}/${DB_NAME}`);
-> collect host name: connectionInstance.connection.host
-> Two methods to connect to Mongo:
    1. put all code in index.js file
    2. put code in db/index.js and export the connection instance

---------------------------------------------------------------------------------------------------

** Custome API response and Error Handling
-> install packages: cookie-parser and cors
    1. cookie-parser:
        - npm install cookie-parser
    
    2. cors:
        - npm install cors
        - mainly use to connect backend to frontend
        - cross origin resouse sharing
        - app.use(cors())

-> request can come in multiple ways like: form, json, body, form-body.
    - we have to limit the request data because it can crash the server if data is heavy.
    - example: limiting json requests data: app.use(express.json({limit: "16kb"}))        

-> when data is coming from url (query string) we have to read it in our backend:
    - app.use(express.urlencoded({extended: true, limit: "16kb"}));
    - extended: pass objects in objects as query string

-> to store the files in our server's public directory:
    - app.use(express.static("public"));
    - anyone can access those assets

-> set the cookies from the server to client-side:
    - app.use(cookieParser());

-> get method for accepting requests are having 4 fields:
    1. err - error - 
    2. req - request
    3. res - response
    4. next - use in middlewares to give flag to next middleware that it's work is finish now you can do your's.

-> set the stucture of the send error and response to the client-side as in same formate, for that defin files like 'ApiError' and 'ApiResponse' in utils folder that make the same structure for sending responses to the server.

---------------------------------------------------------------------------------------------------

** User and video model with hooks and AWT:

-> index filed in model is used when the field is more searchable in datbase like username.
-> const userSchema = new Schema({
        username: {
            type: String, // define the type of the user
            required: true, // define that user entry is required
            unique: true, // define that user entry is unique
            lowercase: true, // define that user entry is lower case
            trim: true, // trim the data
            index: true
        }
    });    

-> install aggregation package:
    - npm i mongoose-aggregate-paginate-v2

-> bcrypt and JWT packages:
    1. bcrypt:
        - npm i bcrypt
        - used to hash the password
    2. JWT (Json Web Token):
        - npm i jsonwebtoken
        - used to generate the tokens and send to the client.
        - it is bearer token

-> () {} this function declaration can not access the data member out side the body

-> 'Pre' middleware: 
    - mongoose has it's own middleware like: 'pre' that will run before the data is save.
    - example: before saving user data, encrypt the password
    - types: when you want to hook into the middleware:
        1. validate, 2. save, 3.remove, 4.updateOne, 5.deleteOne 6. init
    - do not use callback like this: () {} because we can not access the Schema. In place od that use:
        async function(next) {}
        - this can take some time because it works with database so use async.
        - next is middleware to pass the flag.
    - this pre hook will run each time when you modify the data, but you want to run it when some particular data is modified.
        - put condition to check your desired field is edited or not:
            if(!this.isModified("password")) return next(); // check that password is modified, if not than return next

    Example:
        userSchema.pre("save", function(next){
            if(!this.isModified("password")) return next();
            this.password = bcrypt.hash(this.password,10);
            next();
        })

-> Custom Methods of Schema:
    - userSchema.methods.isPasswordCorrect = async function (password) {
        return await bcrypt.compare(password, this.password);
    };

-> use of JWT Token:
    - 

---------------------------------------------------------------------------------------------------

** How to upload file in backend

-> Cloudinary site, free for file upload.
-> install packages: 
    1. cloudinary : npm i cloudinary
    2. multer : npm i multer

-> import "fs" -> file system inbuilt package of node js for file Handling

-> multer: Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files

---------------------------------------------------------------------------------------------------

** Router, Controller and Debugging

-> in routes folder, put all the routes for when on which url, run which controller.
-> create router: const router = Router();
-> all router should written in app.js
-> because we are sepratting routes, so do not use 'app.get()' in place user router like: app.use(routerName)
-> create route: router.route('/register' ).post(registerUser)

---------------------------------------------------------------------------------------------------

** Logic Building

-> some() : method of List, to check some condition and return boolean value
    - [username, password, fullName, email].some((field) => field?.trim() === '')
    - checking that all fields are not empty
    - ((field) => field?.trim() === "") this method will return true or false

-> model build with mongoose is behave like a monog db query:
    User.findOne({
        $or: [{ username }, { email }],
    });

-> add middleware: here, post method has upload file middleware and then registerUser method
    router.route('/register').post(
        upload.fields([ // more than one file field
            { // first file field
                name: 'avatar', // expected name from frontend 
                maxCount: 1 // number of uploaded files
            },
            { // second file field
                name: 'coverImage', // expected name from frontend
                maxCount: 1 // number of uploaded files
            }
        ]) ,
        registerUser // method to call
    );

-> collect fields from request: const { fullName, email, username, password } = req.body;

---------------------------------------------------------------------------------------------------

** How to use Postman:

-> in Body, we have to set the data fields in [json, form data, etc]  to set the data in request
-> to set file, use form data.

-> Remove File:
    fs.unlinkSync(localFilePath); // remove synchronously

-> Create Collection and put all your requests in that for testing.
-> also, create folders like: user where all the requests are related to users.
-> the base url is static for all the request so set it in the environment variable of postman.
    - go to environment and add variable.
    - in env variable, set the collection you have created to link both.
    - put {{variable_name}} in place of url.